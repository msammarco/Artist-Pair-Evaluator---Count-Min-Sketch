package com.sammarco;


import java.io.*;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;

/**
 * ArtistPairEvaluator provides the functionality to find pairs of artists in a list file provided. It aims to be space
 * efficient by relying upon CountMinSketch as the probabilistic data structure to handle minimum pair counts.
 *
 * Created by Matt Sammarco
 * @see CountMinSketch CountMinSketch
 */
public class ArtistPairEvaluator {

    private static final String ARTIST_SEPARATOR = ",";
    private static final String LINE_SEPARATOR = "\r\n";

    private HashSet<String> resultSet = new HashSet<>();
    private ArrayList<String[]> bandsList = new ArrayList<>();
    private CountMinSketch countMinSketch;
    private int matchMin;

    /**
     * Initialize a new ArtistPairEvaluator
     *
     * @param inputFileName The path and file of the input file
     * @param matchMin The amount of matches to report on. ie. if we're checking if pairs appear 2..n times in the set of lists
     * @throws IOException
     */
    public ArtistPairEvaluator(String inputFileName, int matchMin, float epsilon, float delta) throws IOException, IllegalArgumentException {
        if (matchMin <= 0) {
            throw new IllegalArgumentException("Minimum match amount must be greater than 0");
        }
        try (BufferedReader br = new BufferedReader(new FileReader(inputFileName))) {
            // this.countMinSketch = new CountMinSketch(10, 100000); // Explicitly defining matrix dimensions.
            this.countMinSketch = new CountMinSketch(epsilon, delta);
            this.matchMin = matchMin;
            String line;
            while ((line = br.readLine()) != null) {
                String [] bands = line.split(",");
                Arrays.sort(bands);
                bandsList.add(bands);
            }
        } catch(Exception e) {
            throw e;
        }
    }

    /**
     * Finds the pairs of artists in the lists of band lists. Saves this result to a set internally.
     */
    public void findPairs() {
        for(String [] bandList : bandsList) {
            for (int i = 0; i < bandList.length - 1; i++) {
                for (int k = i; k < bandList.length - 1; k++) {
                    String pair = bandList[i] + ARTIST_SEPARATOR + bandList[k + 1];
                    int count = countMinSketch.insert(pair);
                    if (count >= matchMin) {
                        resultSet.add(pair);
                    }
                }
            }
        }
    }


    private HashSet<String> resultBruteSet = new HashSet<String>();
    /**
     * Find the pairs using the brute force method. This method is provided to validate findPairs()
     */
    public void findBrutePairs() {
        HashMap<String, Integer> bandMap = new HashMap<String, Integer>();
        for (String [] bands : this.bandsList) {
            for (int i = 0; i < bands.length -1; i++) {
                for (int k = i; k < bands.length - 1; k++) {
                    String pair = bands[i] + ARTIST_SEPARATOR + bands[k + 1];
                    if (!resultBruteSet.contains(pair)) {
                        if (bandMap.containsKey(pair)) {
                            Integer count = bandMap.get(pair);
                            count++;
                            if (count >= matchMin) {
                                resultBruteSet.add(pair);
                            }
                            bandMap.put(pair, count);
                        } else {
                            bandMap.put(pair, 1);
                        }
                    }
                }
            }
        }
    }


    /**
     * Saves the result set generated by findPairs() to the output file specified.
     * @param outputFileName The output filename with path
     */
    public void saveResults(String outputFileName) throws FileNotFoundException, UnsupportedEncodingException {
        System.out.println("Brute mapping of artist pairs contains: " + resultBruteSet.size());
        System.out.println("Count Min Sketch algorithm estimate: " + resultSet.size());
        PrintWriter writer = new PrintWriter(new FileOutputStream(outputFileName), true);
        for (Object result : resultSet) {
            writer.write(result + LINE_SEPARATOR);
        }
        writer.close();
        System.out.println("Results saved");
    }
}
